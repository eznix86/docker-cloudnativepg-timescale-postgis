name: Build

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '.github/workflows/build.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # renovate datasource=github-releases depName=timescale/timescaledb
  TIMESCALE_VERSION: 2.21.3

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Postgres 17
          - postgres_version: "17"
            # renovate datasource=docker depName=ghcr.io/cloudnative-pg/postgresql
            cnpg_version: 17.5-22
            latest: "true"
            platform: linux/amd64
            runner: ubuntu-24.04
          - postgres_version: "17"
            cnpg_version: 17.5-22
            latest: "true"
            platform: linux/arm64/v8
            runner: ubuntu-24.04-arm

          # Postgres 16
          - postgres_version: "16"
            cnpg_version: 16.9-22
            platform: linux/amd64
            runner: ubuntu-24.04
          - postgres_version: "16"
            cnpg_version: 16.9-22
            platform: linux/arm64/v8
            runner: ubuntu-24.04-arm

          # Postgres 15
          - postgres_version: "15"
            cnpg_version: 15.13-22
            platform: linux/amd64
            runner: ubuntu-24.04
          - postgres_version: "15"
            cnpg_version: 15.13-22
            platform: linux/arm64/v8
            runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare platform pair
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Get CloudNativePG version
        id: cnpg
        env:
          VERSION: ${{ matrix.cnpg_version }}
        run: |
          {
            echo "version=$VERSION"
            echo "minor=$(cut -d- -f1 <<<"$VERSION")"
            echo "major=$(cut -d. -f1 <<<"$VERSION")"
          } >> $GITHUB_OUTPUT

      - name: Get Timescale version
        id: timescale
        run: |
          {
            echo "version=$TIMESCALE_VERSION"
            echo "minor=$(cut -d. -f-2 <<<"$TIMESCALE_VERSION")"
            echo "major=$(cut -d. -f1 <<<"$TIMESCALE_VERSION")"
          } >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,priority=1000,value=latest,enable=${{ matrix.latest || 'false' }}
            type=raw,priority=999,value=${{ steps.cnpg.outputs.version }}-ts${{ steps.timescale.outputs.version }}-postgis3
            type=raw,priority=998,value=${{ steps.cnpg.outputs.minor }}-ts${{ steps.timescale.outputs.minor }}-postgis3
            type=raw,priority=997,value=${{ steps.cnpg.outputs.major }}-ts${{ steps.timescale.outputs.major }}-postgis3
            type=raw,priority=996,value=${{ steps.cnpg.outputs.version }}
            type=raw,priority=995,value=${{ steps.cnpg.outputs.minor }}
            type=raw,priority=994,value=${{ steps.cnpg.outputs.major }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            POSTGRES_VERSION=${{ matrix.postgres_version }}
            CLOUDNATIVEPG_VERSION=${{ steps.cnpg.outputs.version }}
            TIMESCALE_VERSION=${{ steps.timescale.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}-${{ matrix.postgres_version }}
          path: ${{ runner.temp }}/digests/*
          retention-days: 1

      - name: Upload metadata
        if: ${{ matrix.platform == 'linux/amd64' }}
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.postgres_version }}
          path: ${{ steps.meta.outputs.json }}
          retention-days: 1

  merge:
    runs-on: ubuntu-24.04
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Download metadata
        uses: actions/download-artifact@v5
        with:
          path: ./metadata
          pattern: metadata-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest lists and push for all versions
        working-directory: ${{ runner.temp }}/digests
        run: |
          for file in $GITHUB_WORKSPACE/metadata/*.json; do
            tags=$(jq -cr '.tags | map("-t " + .) | join(" ")' "$file")
            echo "Merging for tags from $file: $tags"
            docker buildx imagetools create $tags $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
          done


      - name: Inspect image (latest)
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
